#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Nov 10, 2019 02:15:11 PM PKT  platform: Windows NT

import sys
from tkinter import filedialog
from PIL import ImageTk, Image
import cv2
import matplotlib.pyplot as plt
import align_faces
import compare
import sift_find
import os
import first
import sift_calculate
import numpy as np
import numpy_sift
try:
    import Tkinter as tk
    from tkinter import messagebox
except ImportError:
    import tkinter as tk
    from tkinter import messagebox
imaget=''
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    
    global im,imagename,choice,tt
    
    global val, w, root
    tt=0
    root = tk.Tk()
    
    root.state("zoomed")
    top = Toplevel1 (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
#    root.attributes('-fullscreen', True)
    w = tk.Toplevel (root)
    
    top = Toplevel1 (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    
    w.destroy()
    w = None

class Toplevel1:
    def choice1(self):
        global choice
        choice=1
    def choice3(self):
        global choice
        choice=3
    def choice10(self):
        global choice
        choice=9
    def addmug(self):
        self.filenm = filedialog.askopenfilename(initialdir =  "/", title = "Select A File", filetype =
        (("jpeg files","*.jpg"),("all files","*.*")) )
        imgg=Image.open(self.filenm)
        
        addmg(imgg,self.filenm)
        
    def impbtf(self):
        self.filename = filedialog.askopenfilename(initialdir =  "/", title = "Select A File", filetype =
        (("jpeg files","*.jpg"),("all files","*.*")) )
        global im,imagename
        im=Image.open(self.filename)
        self.img.delete("all")
#        imaget=Image.open(self.filename)
#        self.Labelframe2.configure(text=self.filename)
        imagename=self.filename
        img=align_faces.align(im)
        cv2.imwrite("temp.jpg",img)
        imagename="temp.jpg"
        img=Image.fromarray(img.astype('uint8'), 'RGB')
        imgg = ImageTk.PhotoImage(img)
#        panel = tk.Canvas(self.img, image = imgg)
#        panel.image=imgg
#        panel.create_image(image=panel.image,anchor='nw')
        self.image_on_canvas=self.img.create_image((0, 0),image=imgg,anchor='nw')
#        self.img.pack(expand=1)
        self.img.mainloop()
#        panel.pack(fill="both")
    def alignbtnf(self):
        global im,imagename
        img=align_faces.align(im)
        cv2.imwrite("temp.jpg",img)
        imagename="temp.jpg"
        img=Image.fromarray(img.astype('uint8'), 'RGB')
        imgg = ImageTk.PhotoImage(img)
        self.img.itemconfig(self.image_on_canvas,image=imgg)
        self.img.mainloop()
    def mtchbtnf(self):
        self.img_2.delete("all")
#        res = messagebox.askyesno("Exit", "Do you really want to exit ?")
#        ii=im.convert('L')
#        result=compare.compare(imagename)
        if choice==1:
            
            result=sift_find.find(imagename,img_f)
            
#        messagebox.showinfo("Title", str(choice))
#            self.image_on_canvas=self.img_2.create_image((0, 0),image=result,anchor='nw')
            tt=1
        elif choice==3:
            result=sift_find.find3(imagename,img_f)
            
            tt=1
        else:
            result=sift_find.find10(imagename,img_f)
            tt=1
            
#        result=Image.fromarray(result.astype('uint8'), 'RGB')
#        result = ImageTk.PhotoImage(result)
##        messagebox.showinfo("Title", str(choice))
        result = ImageTk.PhotoImage(result)
#        messagebox.showinfo("Title", str(choice))
        self.image_on_canvas=self.img_2.create_image((0, 0),image=result,anchor='nw')
#        self.image_on_canvas=self.img_2.create_image((0, 0),expand=YES,fill=BOTH,image=result,anchor='nw')
#        self.img.pack(expand=1)
        self.img_2.mainloop()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        global choice
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 12 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        choice=1
        fileuser="cuser.txt"
    
        with open(fileuser) as fpu:
            for line in fpu:
                cuser=line.strip()
        
        top.geometry("1834x1325+650+150")
        top.title("Matcher")
        top.configure(background="#e3faf9")

        self.inptim = tk.LabelFrame(top)
        self.inptim.place(relx=0.011, rely=0.091, relheight=0.668
                , relwidth=0.500)
        self.inptim.configure(relief='groove')
        self.inptim.configure(foreground="#000000")
        self.inptim.configure(borderwidth="0")
        self.inptim.configure(text='''Input Image''')
        self.inptim.configure(font=font9)
        self.inptim.configure(background="#e3faf9")

        self.img = tk.Canvas(self.inptim)
        self.img.place(relx=0.023, rely=0.056, relheight=0.93, relwidth=0.946
                , bordermode='ignore')
        self.img.configure(background="#d9d9d9")
        self.img.configure(borderwidth="0")
        self.img.configure(insertbackground="black")
        self.img.configure(relief="ridge")
        self.img.configure(selectbackground="#c4c4c4")
        self.img.configure(selectforeground="black")

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.011, rely=0.762, relheight=0.23
                , relwidth=0.500)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="#000000")
        self.Labelframe2.configure(borderwidth="0")
        self.Labelframe2.configure(text='''Controls''')
        self.Labelframe2.configure(background="#e3faf9")

        self.imprtbtn = tk.Button(self.Labelframe2)
        self.imprtbtn.place(relx=0.022, rely=0.197, height=54, width=162
                , bordermode='ignore')
        self.imprtbtn.configure(activebackground="#ececec")
        self.imprtbtn.configure(activeforeground="#000000")
        self.imprtbtn.configure(background="#ffffff")
        self.imprtbtn.configure(disabledforeground="#a3a3a3")
        self.imprtbtn.configure(foreground="#000000")
        self.imprtbtn.configure(highlightbackground="#d9d9d9")
        self.imprtbtn.configure(highlightcolor="black")
        self.imprtbtn.configure(pady="0")
        self.imprtbtn.configure(font=("Courier", 14))
        self.imprtbtn.configure(text='''Import Sketch''')
        self.imprtbtn.configure(command=self.impbtf)

#        self.alignbtn = tk.Button(self.Labelframe2)
#        self.alignbtn.place(relx=0.022, rely=0.459, height=64, width=200
#                , bordermode='ignore')
#        self.alignbtn.configure(activebackground="#ececec")
#        self.alignbtn.configure(activeforeground="#000000")
#        self.alignbtn.configure(background="#d9d9d9")
#        self.alignbtn.configure(disabledforeground="#a3a3a3")
#        self.alignbtn.configure(foreground="#000000")
#        self.alignbtn.configure(highlightbackground="#d9d9d9")
#        self.alignbtn.configure(highlightcolor="black")
#        self.alignbtn.configure(pady="0")
#        self.alignbtn.configure(text='''Align Image''')
#        self.alignbtn.configure(command=self.alignbtnf)

        self.mtchbtn = tk.Button(self.Labelframe2)
        self.mtchbtn.place(relx=0.022, rely=0.55, height=54, width=162
                , bordermode='ignore')
        self.mtchbtn.configure(activebackground="#ececec")
        self.mtchbtn.configure(activeforeground="#000000")
        self.mtchbtn.configure(background="#5DAE75")
        self.mtchbtn.configure(disabledforeground="#a3a3a3")
        self.mtchbtn.configure(foreground="#000000")
        self.mtchbtn.configure(highlightbackground="#d9d9d9")
        self.mtchbtn.configure(highlightcolor="black")
        self.mtchbtn.configure(pady="0")
        self.mtchbtn.configure(font=("Courier", 14))
        self.mtchbtn.configure(text='''Match''')
        self.mtchbtn.configure(command=self.mtchbtnf)
        
        
        self.addbtn = tk.Button(self.Labelframe2)
        self.addbtn.place(relx=0.277, rely=0.197, height=54, width=162
                , bordermode='ignore')
        self.addbtn.configure(activebackground="#ececec")
        self.addbtn.configure(activeforeground="#000000")
        self.addbtn.configure(background="#ffffff")
        self.addbtn.configure(disabledforeground="#a3a3a3")
        self.addbtn.configure(foreground="#000000")
        self.addbtn.configure(highlightbackground="#d9d9d9")
        self.addbtn.configure(highlightcolor="black")
        self.addbtn.configure(pady="0")
        self.addbtn.configure(font=("Courier", 14))
        self.addbtn.configure(text='''Add Mugshot''')
        self.addbtn.configure(command=self.addmug)
        
        
        self.calbtn = tk.Button(self.Labelframe2)
        self.calbtn.place(relx=0.277, rely=0.55, height=54, width=162
                , bordermode='ignore')
        self.calbtn.configure(activebackground="#ececec")
        self.calbtn.configure(activeforeground="#000000")
        self.calbtn.configure(background="#ffffff")
        self.calbtn.configure(disabledforeground="#a3a3a3")
        self.calbtn.configure(foreground="#000000")
        self.calbtn.configure(highlightbackground="#d9d9d9")
        self.calbtn.configure(highlightcolor="black")
        self.calbtn.configure(pady="0")
        self.calbtn.configure(font=("Courier", 11))
        self.calbtn.configure(text='''Calculate Descriptors''')
        self.calbtn.configure(command=calculte)
        
        
        
        self.help = tk.Button(self.Labelframe2)
        self.help.place(relx=0.78, rely=0.197, height=54, width=162
                , bordermode='ignore')
        self.help.configure(activebackground="#ececec")
        self.help.configure(activeforeground="#000000")
        self.help.configure(background="#ffffff")
        self.help.configure(disabledforeground="#a3a3a3")
        self.help.configure(foreground="#000000")
        self.help.configure(highlightbackground="#d9d9d9")
        self.help.configure(highlightcolor="black")
        self.help.configure(pady="0")
        self.help.configure(font=("Courier", 14))
        self.help.configure(text='''Help''')
        self.help.configure(command=helpp)
        
        self.logout = tk.Button(self.Labelframe2)
        self.logout.place(relx=0.78, rely=0.55, height=54, width=162
                , bordermode='ignore')
        self.logout.configure(activebackground="#ececec")
        self.logout.configure(activeforeground="#000000")
        self.logout.configure(background="#ffffff")
        self.logout.configure(disabledforeground="#a3a3a3")
        self.logout.configure(foreground="#000000")
        self.logout.configure(highlightbackground="#f50707")
        self.logout.configure(highlightcolor="black")
        self.logout.configure(pady="0")
        self.logout.configure(font=("Courier", 14))
        self.logout.configure(text='''Log Out''')
        self.logout.configure(command=logout)
        
        
        
        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(relx=0.497, rely=0.159, height=64, width=252)
        self.Label2.configure(background="#e3faf9")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font9)
        self.Label2.configure(text='''No of Matches:''')
        
        self.radchoice1=tk.Radiobutton(self.Labelframe2)
        self.radchoice1.configure(text="1")
        self.radchoice1.configure(font=font9)
        self.radchoice1.configure(foreground="#000000")
        self.radchoice1.configure(value=1)
        self.radchoice1.configure(background="#e3faf9")
        self.radchoice1.configure(variable=choice)
        self.radchoice1.place(relx=0.550, rely=0.459
                )
        self.radchoice1.configure(command=self.choice1)
        
        self.radchoice3=tk.Radiobutton(self.Labelframe2)
        self.radchoice3.configure(text="3")
        self.radchoice3.configure(font=font9)
        self.radchoice3.configure(foreground="#000000")
        self.radchoice3.configure(value=3)
        self.radchoice3.configure(background="#e3faf9")
        self.radchoice3.configure(variable=choice)
        self.radchoice3.place(relx=0.603, rely=0.459,
                )
        self.radchoice3.configure(command=self.choice3)
        
        self.radchoice10=tk.Radiobutton(self.Labelframe2)
        self.radchoice10.configure(text="9")
        self.radchoice10.configure(font=font9)
        self.radchoice10.configure(foreground="#000000")
        self.radchoice10.configure(value=9)
        self.radchoice10.configure(background="#e3faf9")
        self.radchoice10.configure(variable=choice)
        self.radchoice10.place(relx=0.653, rely=0.459
                )
        self.radchoice10.configure(command=self.choice10)
        

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.011, rely=0.015, relheight=0.072
                , relwidth=0.979)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="0")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#e3faf9")



        self.Labeluser = tk.Label(self.Frame1)
        self.Labeluser.place(relx=0.100, rely=0.355, height=65, width=60)
        self.Labeluser.configure(background="#e3faf9")
        self.Labeluser.configure(disabledforeground="#a3a3a3")
        self.Labeluser.configure(font=("Courier",15))
        self.Labeluser.configure(foreground="#000000")
        self.Labeluser.configure(text='''User:''')
        

        self.Labeluserv = tk.Label(self.Frame1)
        self.Labeluserv.place(relx=0.150, rely=0.355, height=65, width=120)
        self.Labeluserv.configure(background="#e3faf9")
        self.Labeluserv.configure(disabledforeground="#a3a3a3")
        self.Labeluserv.configure(font=("Courier",15))
        self.Labeluserv.configure(foreground="#000000")
        self.Labeluserv.configure(text=cuser)


        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.301, rely=0.105, height=65, width=800)
        self.Label1.configure(background="#e3faf9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=("Courier",24))
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Sketch Matching with Mugshot''')

        self.outpimg = tk.LabelFrame(top)
        self.outpimg.place(relx=0.513, rely=0.091, relheight=0.900
                , relwidth=0.474)
        self.outpimg.configure(relief='groove')
        self.outpimg.configure(foreground="#000000")
        self.outpimg.configure(borderwidth="0")
        self.outpimg.configure(font=font9)
        self.outpimg.configure(text='''Output Image''')
        self.outpimg.configure(background="#e3faf9")
        self.outpimg.configure(highlightbackground="#d9d9d9")
        self.outpimg.configure(highlightcolor="black")

        self.img_2 = tk.Canvas(self.outpimg)
        self.img_2.place(relx=0.023, rely=0.056, relheight=0.93, relwidth=0.946
                , bordermode='ignore')
        self.img_2.configure(background="#d9d9d9")
        self.img_2.configure(borderwidth="0")
        self.img_2.configure(highlightbackground="#d9d9d9")
        self.img_2.configure(highlightcolor="black")
        self.img_2.configure(insertbackground="black")
        self.img_2.configure(relief="ridge")
        self.img_2.configure(selectbackground="#c4c4c4")
        self.img_2.configure(selectforeground="black")

        self.Labelframe1_3 = tk.LabelFrame(self.outpimg)
        self.Labelframe1_3.place(relx=1.575, rely=0.588, relheight=1.0
                , relwidth=1.0, bordermode='ignore')
        self.Labelframe1_3.configure(relief='groove')
        self.Labelframe1_3.configure(foreground="black")
        self.Labelframe1_3.configure(text='''Image Display''')
        self.Labelframe1_3.configure(background="#d9d9d9")
        self.Labelframe1_3.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_3.configure(highlightcolor="black")

        self.img_4 = tk.Canvas(self.Labelframe1_3)
        self.img_4.place(relx=0.023, rely=0.056, relheight=0.93, relwidth=0.946
                , bordermode='ignore')
        self.img_4.configure(background="#d9d9d9")
        self.img_4.configure(borderwidth="0")
        self.img_4.configure(highlightbackground="#d9d9d9")
        self.img_4.configure(highlightcolor="black")
        self.img_4.configure(insertbackground="black")
        self.img_4.configure(relief="ridge")
        self.img_4.configure(selectbackground="#c4c4c4")
        self.img_4.configure(selectforeground="black")
file="discriptors.txt"
count=0
imgenc=[]
img_f=[]
imgc=0
temp=[]
with open(file) as fp:
    for line in fp:
        
        dist=line.strip()
        temp.append(int(dist))
        count=count+1
        
        if count==128:
            imgenc.append(temp)
            imgc=imgc+1
            temp=[]
            count=0
        if imgc==300:
            img_f.append(imgenc)
            imgenc=[]
            imgc=0
for i in range(0,len(img_f)):
    for k in range(0,len(img_f[i])):
        
        t=img_f[i][k][0]
        for c in range(1,len(img_f[i][k])):
            t=np.vstack([t,img_f[i][k][c]])
        img_f[i][k]=t
for i in range(0,len(img_f)):
    t=np.transpose(img_f[i][0])
    for k in range(1,len(img_f[i])):
        t=np.vstack([t,np.transpose(img_f[i][k])])
    img_f[i]=t



def calculte():
    rr=messagebox.askokcancel("Confirmation","Are you sure? It might take few minutes.",icon = 'warning')
    if(rr):
        sift_calculate.calculate()
        messagebox.showinfo("Calculate Features","Feature Database Updated Successfully")
def logout():
    global root
    fileus="userc.txt"
    ff=open(fileus,"w")
    ff.write("")
    ff.close()
    root.destroy()
    first.vp_start_gui()

def addmg(im,path):
    lab=[]
    fil="labels.txt"
    with open(fil) as f:
        for l in f:
            lab.append(l.strip())
    head,tail=os.path.split(path)
    lab.append(tail)
    SD=numpy_sift.SIFTDescriptor(patchSize = 16)
    im=align_faces.align(im)
    cv2.imwrite("altemp.jpg",im)
    im=Image.open("altemp.jpg")
    h,w=im.size
    imgdist=[]
    s=16
    d=8
    n=int((w-s)/(d+1))
    m=int((h-s)/(d+1))-13
    t1=0
    ss=s
    t2=0
    c=0
    r=16
    for i in range(0,m-1):

        for k in range(0,n-1):
            croped=im.crop((t1,t2,s,ss))

            
            t1=t1+d
            s=s+d

            ii=np.asarray(croped.convert('L'))

            descriptors = SD.describe(ii)
            
    
            if descriptors.__class__.__name__== "ndarray":
    
                imgdist.append(descriptors)
            
    
        t1=0
        t2=c+16
        
        c=t2
        
        s=16
        ss=r+16
        r=ss
    temp=imgdist[0]
    for i in range(1,len(imgdist)):
        if imgdist[i].__class__.__name__== "ndarray":
    #        print("loop")
            temp=np.vstack([temp,imgdist[i]])
    for i in range(0,len(temp)):
        if temp[i][0]==-2147483648:
            for k in range(0,len(temp[i])):
                temp[i][k]=0
    img_f.append(temp)
    fil="discriptors.txt"
    fil=open(fil,"w")
    for d in img_f:
        for i in d:
            for k in i:
                fil.write(str(k)+"\n")
    fil.close()
    file="labels.txt"
    file=open(file,"w")
    for d in lab:
        file.write(d+"\n")
    file.close()
    path="C:\\Users\\ASUS\\Documents\\BSCS-7B\\FYP\\nn\\"+tail
    im.save(path)
    messagebox.showinfo("Add Mugshot","Mugshot Added Successfully")
#    im=np.asarray(im.convert('P'))
#    cv2.imwrite(path,im)
cuser=" "
def helpp():
    messagebox.showinfo("Help","1. Import Sketch will Import Sketches from your desired location. \n\n\n2. Match Button will bring the best 1,3 and 9 (based on the selected radio button) matches from the database.\n\n\n 3. Calculate Descriptors will re-calculate the features of the images present in the database.So it will take few minutes depending upon the no of images present in the database. \n\n\n 4. Add Mughsot will add a image in the database and will also calculate its features and might take few minutes.")
if __name__ == '__main__':
    
    vp_start_gui()
filee=open("cuser.txt","w")
filee.write(" ")
filee.close()
try:
    os.remove("temp.jpg")
    os.remove("result.jpg")
except FileNotFoundError:
    print(" ")




